// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int       @id @default(autoincrement())
  email     String    @unique
  nickname  String    @unique
  image     String
  password  String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  product   Product[]
  article   Article[]
  comment   Comment[]
  likes     Like[] 
}

model Product {
  id          Int       @id @default(autoincrement())
  name        String
  description String
  price       Float
  tags        String[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  article     Article[]
  comment     Comment[]
  userId      Int
  user        User      @relation(fields: [userId], references: [id])
  likes       Like[]
}

model Article {
  id        Int       @id @default(autoincrement())
  title     String
  content   String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  userId    Int
  productId Int?
  user      User      @relation(fields: [userId], references: [id])
  product   Product?  @relation(fields: [productId], references: [id], onDelete: SetNull)
  comment   Comment[]
  likes     Like[]
}

model Comment {
  id        Int      @id @default(autoincrement())
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    Int
  articleId Int?
  productId Int?
  user      User     @relation(fields: [userId], references: [id])
  article   Article? @relation(fields: [articleId], references: [id], onDelete: SetNull)
  product   Product? @relation(fields: [productId], references: [id], onDelete: SetNull)
}

model Like {
  id         Int      @id @default(autoincrement())
  userId     Int
  productId  Int?
  articleId  Int?
  createdAt  DateTime @default(now())

  user       User     @relation(fields: [userId], references: [id])
  product    Product? @relation(fields: [productId], references: [id], onDelete: Cascade)
  article    Article? @relation(fields: [articleId], references: [id], onDelete: Cascade)

  @@unique([userId, productId], name: "user_product_unique")
  @@unique([userId, articleId], name: "user_article_unique")
}